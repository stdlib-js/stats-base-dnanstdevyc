// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
var e,r;e=this,r=function(e){"use strict";var r="function"==typeof Object.defineProperty?Object.defineProperty:null,t=Object.defineProperty,n=Object.prototype,o=n.toString,a=n.__defineGetter__,i=n.__defineSetter__,u=n.__lookupGetter__,f=n.__lookupSetter__,l=function(){try{return r({},"x",{}),!0}catch(e){return!1}}()?t:function(e,r,t){var l,c,_,d;if("object"!=typeof e||null===e||"[object Array]"===o.call(e))throw new TypeError("invalid argument. First argument must be an object. Value: `"+e+"`.");if("object"!=typeof t||null===t||"[object Array]"===o.call(t))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+t+"`.");if((c="value"in t)&&(u.call(e,r)||f.call(e,r)?(l=e.__proto__,e.__proto__=n,delete e[r],e[r]=t.value,e.__proto__=l):e[r]=t.value),_="get"in t,d="set"in t,c&&(_||d))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return _&&a&&a.call(e,r,t.get),d&&i&&i.call(e,r,t.set),e};function c(e,r,t){l(e,r,{configurable:!1,enumerable:!1,writable:!1,value:t})}function _(e,r,t,n){var o,a,i,u,f,l,c,_;if(e<=0)return NaN;if(1===e||0===n)return(f=t[0])==f&&e-r>0?0:NaN;for(a=n<0?(1-e)*n:0,_=0;_<e&&(f=t[a])!=f;_++)a+=n;if(_===e)return NaN;for(a+=n,o=f,u=0,_+=1,c=1;_<e;_++)(f=t[a])==f&&(u+=1/((c+=1)*(c-1))*(l=c*f-(o+=f))*l),a+=n;return(i=c-r)<=0?NaN:u/i}function d(e,r,t,n,o){var a,i,u,f,l,c,_,d;if(e<=0)return NaN;if(1===e||0===n)return(l=t[o])==l&&e-r>0?0:NaN;for(i=o,d=0;d<e&&(l=t[i])!=l;d++)i+=n;if(d===e)return NaN;for(i+=n,a=l,f=0,d+=1,_=1;d<e;d++)(l=t[i])==l&&(f+=1/((_+=1)*(_-1))*(c=_*l-(a+=l))*c),i+=n;return(u=_-r)<=0?NaN:f/u}c(_,"ndarray",d);var p=Math.sqrt;function y(e,r,t,n){return p(_(e,r,t,n))}function s(e,r,t,n,o){return p(d(e,r,t,n,o))}c(y,"ndarray",s),e.default=y,e.ndarray=s,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r((e="undefined"!=typeof globalThis?globalThis:e||self).dnanstdevyc={});
//# sourceMappingURL=browser.js.map
